// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MangaProjectDbContext))]
    [Migration("20250824030559_KitsuMember")]
    partial class KitsuMember
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.AnimeS.Anime", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<int>("AccessUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("Airing")
                        .HasColumnType("bit");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BroadcastComplete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BroadcastDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BroadcastTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BroadcastTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImageLarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EpisodeLength")
                        .HasColumnType("int");

                    b.Property<int?>("Episodes")
                        .HasColumnType("int");

                    b.Property<int?>("Favorites")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdKitsu")
                        .HasColumnType("int");

                    b.Property<string>("JpgImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JpgLargeImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JpgSmallImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<int>("MalId")
                        .HasColumnType("int");

                    b.Property<int?>("Members")
                        .HasColumnType("int");

                    b.Property<bool?>("Nsfw")
                        .HasColumnType("bit");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("PosterImageLarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<int?>("ScoredBy")
                        .HasColumnType("int");

                    b.Property<string>("Season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Themename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Themetype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Themeurl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleJapanese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSynonyms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebpImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebpLargeImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebpSmallImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeVideoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtubeembed_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtubeurl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Anime", (string)null);
                });

            modelBuilder.Entity("Entities.AnimeS.AnimeComentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("Comentary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataComentary")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("UserId");

                    b.ToTable("AnimeComentary", (string)null);
                });

            modelBuilder.Entity("Entities.AnimeS.AnimeThemeSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeThemeSong");
                });

            modelBuilder.Entity("Entities.AnimeS.Entry", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ID"), 1L, 1);

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("relationID")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("relationID");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Entities.AnimeS.External", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("External");
                });

            modelBuilder.Entity("Entities.AnimeS.Licensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Licensor");
                });

            modelBuilder.Entity("Entities.AnimeS.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Producer");
                });

            modelBuilder.Entity("Entities.AnimeS.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Relation");
                });

            modelBuilder.Entity("Entities.AnimeS.Streaming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Streaming");
                });

            modelBuilder.Entity("Entities.AnimeS.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Studio");
                });

            modelBuilder.Entity("Entities.ApiConsumeStats", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiURLBase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PagesConsumedAnime")
                        .HasColumnType("int");

                    b.Property<int?>("PagesConsumedManga")
                        .HasColumnType("int");

                    b.Property<int?>("TotalRequests")
                        .HasColumnType("int");

                    b.Property<int?>("UnitarioAnime")
                        .HasColumnType("int");

                    b.Property<int?>("UnitarioManga")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApiConsumeStats", (string)null);
                });

            modelBuilder.Entity("Entities.ApiReInsertStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Erro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdFromApi")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApiReInsertStats");
                });

            modelBuilder.Entity("Entities.MangaS.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Entities.MangaS.Manga", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<int>("AccessUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Chapters")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageLarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EpisodeLength")
                        .HasColumnType("int");

                    b.Property<int?>("Favorites")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdKitsu")
                        .HasColumnType("int");

                    b.Property<string>("JpgImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JpgLargeImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JpgSmallImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<int>("MalId")
                        .HasColumnType("int");

                    b.Property<int?>("Members")
                        .HasColumnType("int");

                    b.Property<bool?>("Nsfw")
                        .HasColumnType("bit");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("PosterImageLarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PublishedTo")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Publishing")
                        .HasColumnType("bit");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<int?>("ScoredBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleJapanese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSynonyms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Volumes")
                        .HasColumnType("int");

                    b.Property<string>("WebpImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebpLargeImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebpSmallImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeVideoId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mangas", (string)null);
                });

            modelBuilder.Entity("Entities.MangaS.MangaComentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comentary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataComentary")
                        .HasColumnType("datetime2");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.HasIndex("UserId");

                    b.ToTable("MangaComentary", (string)null);
                });

            modelBuilder.Entity("Entities.MangaS.Serialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int?>("mal_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Serialization");
                });

            modelBuilder.Entity("Entities.MediaBase+Demographic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("MalId")
                        .HasColumnType("int");

                    b.Property<int?>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("MangaId");

                    b.ToTable("Demographic");
                });

            modelBuilder.Entity("Entities.MediaBase+ExplicitGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("MalId")
                        .HasColumnType("int");

                    b.Property<int?>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("MangaId");

                    b.ToTable("ExplicitGenre");
                });

            modelBuilder.Entity("Entities.MediaBase+Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("AnimeId1")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("MalId")
                        .HasColumnType("int");

                    b.Property<int?>("MangaId")
                        .HasColumnType("int");

                    b.Property<int?>("MangaId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("AnimeId1");

                    b.HasIndex("MangaId");

                    b.HasIndex("MangaId1");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Entities.MediaBase+GenreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("MalId")
                        .HasColumnType("int");

                    b.Property<int?>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("MangaId");

                    b.ToTable("GenreItem");
                });

            modelBuilder.Entity("Entities.MediaBase+Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("MalId")
                        .HasColumnType("int");

                    b.Property<int?>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("MangaId");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("Entities.MediaRatingFrequency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int?>("MangaId")
                        .HasColumnType("int");

                    b.Property<int?>("_1")
                        .HasColumnType("int");

                    b.Property<int?>("_2")
                        .HasColumnType("int");

                    b.Property<int?>("_3")
                        .HasColumnType("int");

                    b.Property<int?>("_4")
                        .HasColumnType("int");

                    b.Property<int?>("_5")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId")
                        .IsUnique()
                        .HasFilter("[AnimeId] IS NOT NULL");

                    b.HasIndex("MangaId")
                        .IsUnique()
                        .HasFilter("[MangaId] IS NOT NULL");

                    b.ToTable("MediaRatingFrequency", (string)null);
                });

            modelBuilder.Entity("Entities.UserS.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<int>("AccessUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AvatarImageFileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImageFileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FavoritesCount")
                        .HasColumnType("int");

                    b.Property<bool>("KeepLogged")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Entities.UserS.UserAnimeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<int>("AccessUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Episode")
                        .HasColumnType("int");

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<string>("PrivateNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TotalRewatches")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnimeItem", (string)null);
                });

            modelBuilder.Entity("Entities.UserS.UserMangaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<int>("AccessUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Chapter")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<string>("PrivateNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TotalRereads")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMangaItem", (string)null);
                });

            modelBuilder.Entity("Entities.AnimeS.AnimeComentary", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("Comentaries")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserS.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.AnimeS.AnimeThemeSong", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("ThemeSongs")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Entities.AnimeS.Entry", b =>
                {
                    b.HasOne("Entities.AnimeS.Relation", null)
                        .WithMany("entry")
                        .HasForeignKey("relationID");
                });

            modelBuilder.Entity("Entities.AnimeS.External", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("external")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Entities.AnimeS.Licensor", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("licensors")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Entities.AnimeS.Producer", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("producers")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Entities.AnimeS.Relation", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("relations")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Entities.AnimeS.Streaming", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("streaming")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Entities.AnimeS.Studio", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("studios")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Entities.MangaS.Author", b =>
                {
                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany("Authors")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.MangaS.MangaComentary", b =>
                {
                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany("Comentaries")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserS.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.MangaS.Serialization", b =>
                {
                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany("Serializations")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.MediaBase+Demographic", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("Demographics")
                        .HasForeignKey("AnimeId");

                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany("Demographics")
                        .HasForeignKey("MangaId");

                    b.Navigation("Anime");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.MediaBase+ExplicitGenre", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("ExplicitGenres")
                        .HasForeignKey("AnimeId");

                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany("ExplicitGenres")
                        .HasForeignKey("MangaId");

                    b.Navigation("Anime");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.MediaBase+Genre", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", null)
                        .WithMany("Genres")
                        .HasForeignKey("AnimeId");

                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId1");

                    b.HasOne("Entities.MangaS.Manga", null)
                        .WithMany("Genres")
                        .HasForeignKey("MangaId");

                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaId1");

                    b.Navigation("Anime");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.MediaBase+GenreItem", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("GenreItems")
                        .HasForeignKey("AnimeId");

                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany("GenreItems")
                        .HasForeignKey("MangaId");

                    b.Navigation("Anime");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.MediaBase+Theme", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany("Themes")
                        .HasForeignKey("AnimeId");

                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany("Themes")
                        .HasForeignKey("MangaId");

                    b.Navigation("Anime");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.MediaRatingFrequency", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithOne("MediaRatingFrequency")
                        .HasForeignKey("Entities.MediaRatingFrequency", "AnimeId");

                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithOne("MediaRatingFrequency")
                        .HasForeignKey("Entities.MediaRatingFrequency", "MangaId");

                    b.Navigation("Anime");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Entities.UserS.UserAnimeItem", b =>
                {
                    b.HasOne("Entities.AnimeS.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserS.User", "User")
                        .WithMany("AnimeList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Animeuser");

                    b.Navigation("Anime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.UserS.UserMangaItem", b =>
                {
                    b.HasOne("Entities.MangaS.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserS.User", "User")
                        .WithMany("MangaList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mangauser");

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.AnimeS.Anime", b =>
                {
                    b.Navigation("Comentaries");

                    b.Navigation("Demographics");

                    b.Navigation("ExplicitGenres");

                    b.Navigation("GenreItems");

                    b.Navigation("Genres");

                    b.Navigation("MediaRatingFrequency");

                    b.Navigation("ThemeSongs");

                    b.Navigation("Themes");

                    b.Navigation("external");

                    b.Navigation("licensors");

                    b.Navigation("producers");

                    b.Navigation("relations");

                    b.Navigation("streaming");

                    b.Navigation("studios");
                });

            modelBuilder.Entity("Entities.AnimeS.Relation", b =>
                {
                    b.Navigation("entry");
                });

            modelBuilder.Entity("Entities.MangaS.Manga", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Comentaries");

                    b.Navigation("Demographics");

                    b.Navigation("ExplicitGenres");

                    b.Navigation("GenreItems");

                    b.Navigation("Genres");

                    b.Navigation("MediaRatingFrequency");

                    b.Navigation("Serializations");

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("Entities.UserS.User", b =>
                {
                    b.Navigation("AnimeList");

                    b.Navigation("MangaList");
                });
#pragma warning restore 612, 618
        }
    }
}
